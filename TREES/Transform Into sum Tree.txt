
import java.util.*;

public class studyopedia {

    static class Node {
        int data;
        Node left;
        Node right;

        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    

     //KTH ANCESTOR Of A Node
     public static int KANCESTOR(Node root,int n,int k){
         if(root == null){
            return -1;
    }
        
           if(root.data == n){
             return 0;
}
      int leftDist = KANCESTOR(root.left,n,k);
      int rightDist = KANCESTOR(root.right,n,k);
 
      if(leftDist == -1 && rightDist == -1){
             return -1;
}
      int max = Math.max(leftDist,rightDist);
      if(max+1 == k){
          System.out.println(root.data);
}
   return max+1;
}


    public static int transform(Node root){
      
         if(root == null){
             return 0;
}
        
            int leftchild = transform(root.left);
            int rightchild = transform(root.right);

            int data = root.data;

            int newLeft = root.left == null? 0: root.left.data;
             int newRight = root.right == null? 0: root.right.data;          

            root.data = newLeft + leftchild + newRight + rightchild;
             return data;
}

     public static void preorder(Node root){
          if(root == null){
              return;
}
     System.out.print(root.data+" ");
        preorder(root.left);
        preorder(root.right);
} 


    public static void main(String args[]) {

        /*      1
               / \ 
              /   \
             2     3
            / \   / \
           4   5 7   6

          //Expected tree
                27
               /  \
              /    \
             9     13
            / \    / \
           0   0  0   0

         */

        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);

        transform(root);
        preorder(root);        
   }
}